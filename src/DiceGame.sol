// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract DiceGame {
    uint256 public nonce = 0;
    uint256 public prize = 0;

    event Roll(address indexed palyer, uint256 roll);
    event Winner(address winner, uint256 amount);

    constructor() payable {
        resetPrize();
    }

    function resetPrize() private {
        prize = ((address(this).balance * 10) / 100);
    }

    function rollDice() public payable {
        require(msg.value >= 0.002 ether, "Failed To send enough values");

        bytes32 prevHash = blockhash(block.number - 1);
        bytes32 hash = keccak256(abi.encodePacked(prevHash, address(this), nonce));
        uint256 roll = uint256(hash) % 16;

        //console.log("The Roll is", roll);

        nonce++;
        prize += ((msg.value * 40) / 100);
        emit Roll(msg.sender, roll);

        if (roll > 2) {
            return;
        }
        uint256 amount = prize;
        (bool sent,) = msg.sender.call{value: amount}("");
        require(sent, "failed to send ether");

        resetPrize();
        emit Winner(msg.sender, amount);
    }

    receive() external payable {}
}
